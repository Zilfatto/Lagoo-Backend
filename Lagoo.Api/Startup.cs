using Lagoo.Api.Common.Extensions;
using Lagoo.BusinessLogic;
using Lagoo.Infrastructure;
using Lagoo.Infrastructure.Persistence;

namespace Lagoo.Api;

public class Startup
{
    private const string SpecificationRoute = "/api/specification.json";

    public Startup(IConfiguration configuration, IWebHostEnvironment webHostEnvironment)
    {
        Configuration = configuration;
        WebHostEnvironment = webHostEnvironment;
    }

    public IConfiguration Configuration { get; }

    public IWebHostEnvironment WebHostEnvironment { get; }

    // Add services to the container.
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddControllers();
        
        // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
        // services.AddEndpointsApiExplorer();

        services.AddInfrastructure(Configuration);

        services.AddBusinessLogic();

        services.AddConfiguredCors();
        
        services.AddAutoGeneratedApi();

        services.AddHealthChecks()
            .AddDbContextCheck<AppDbContext>();

        services.AddDatabaseDeveloperPageExceptionFilter();
    }

    // Configure the HTTP request pipeline.
    public void Configure(IApplicationBuilder app, IWebHostEnvironment environment)
    {
        if (environment.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
            app.UseMigrationsEndPoint();
        }
        else
        {
            app.UseHsts();
            app.UseHttpsRedirection();
        }

        app.UseCors("EnableCORS");
        
        app.UseCustomExceptionHandler();
        
        app.UseHealthChecks("/health");

        app.UseOpenApi(settings => settings.Path = SpecificationRoute);

        app.UseReDoc(settings =>
        {
            settings.Path = "/api";
            settings.DocumentPath = SpecificationRoute;
        });
        
        app.UseRouting();
        app.UseAuthentication();
        app.UseAuthorization();

        app.UseEndpoints(endpoints => endpoints.MapControllers());
    }
}